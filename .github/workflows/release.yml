name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: false
        type: boolean

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa-pro
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1g -XX:+TieredCompilation -XX:TieredStopAtLevel=1'

  PRODUCTION_JAR_MODULE_NAME: 'exotic-standalone'
  PRODUCTION_JAR_MODULE_PATH: 'exotic-standalone'
  PRODUCTION_JAR_NAME: 'PulsarRPAPro.jar'
  PRODUCTION_JAR_PATH: 'exotic-standalone/target/PulsarRPAPro.jar'
  DRAFT: true
  PRERELEASE: true
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Correct Permissions
        run: |
          find bin/ -name "*.sh" | xargs chmod +x
          chmod +x ./mvnw

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update Version
        run: |
          bin/release/update-versions.sh

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Start Docker Containers
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Wait for MongoDB and Redis
        run: |
          echo "Waiting for MongoDB and Redis to be ready..."
          docker compose -f docker-compose.yml wait mongodb redis pulsar-rpa-pro

      - name: Run Integration Tests
        id: integration-tests
        shell: bash
        run: |
          echo "::group::üß™ Integration Tests"
          
          if [ -f "./bin/run-integration-test.sh" ]; then
            echo "‚úÖ Found integration test script"
          
            echo "üöÄ Running integration tests..."
            echo "Application URL: http://localhost:8182"
            echo "Network: ${{ env.NETWORK_NAME }}"
            echo "Container: ${{ env.CONTAINER_NAME }}"
          
            if timeout 600 ./bin/run-integration-test.sh; then
              echo "‚úÖ Integration tests passed"
              echo "integration_status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Integration tests failed"
              echo "integration_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Integration test script not found: ./bin/run-integration-test.sh"
            echo "Skipping integration tests..."
            echo "integration_status=skipped" >> $GITHUB_OUTPUT
          fi
          
          echo "::endgroup::"

      - name: Clean up Docker containers
        if: always()
        run: |
          docker stop pulsar-rpa-test || true
          docker compose -f docker-compose.yml down --remove-orphans
          docker container prune -f

      - name: Maven Build
        run: |
          ./mvnw clean install -DskipTests -Pall-modules

      - name: Build PulsarRPA JAR
        if: success()
        run: |
          JAR_PATH=${{ env.PRODUCTION_JAR_PATH }}
          JAR_NAME=${{ env.PRODUCTION_JAR_NAME }}
          MODULE_NAME=${{ env.PRODUCTION_JAR_MODULE_NAME }}
          MODULE_PATH=${{ env.PRODUCTION_JAR_MODULE_PATH }}

          echo "=== Building PulsarRPA JAR ==="
          ./mvnw package -rf :$MODULE_NAME -pl ${MODULE_PATH} -DskipTests=true -Dmaven.javadoc.skip=true

          if [ ! -f "$JAR_PATH" ]; then
            echo "‚ùå $JAR_NAME.jar not found at $JAR_PATH"
            echo "All created jars: "
            find . -name "$JAR_NAME.jar" -print
            exit 1
          fi
          echo "‚úÖ $JAR_NAME.jar built successfully"

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ env.TAG }}
          draft: ${{ env.DRAFT }}
          prerelease: ${{ env.PRERELEASE }}
          generate_release_notes: true
          files: |
            ${{ env.PRODUCTION_JAR_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest

      - name: Update Documents
        if: success()
        run: |
          bin/release/update-documentation.sh

      - name: Pipeline Summary
        if: always()
        shell: bash
        run: |
          echo "::group::üìä Pipeline Summary"
          
          echo "üéØ Pipeline Results:"
          echo "  - Setup: ${{ steps.setup.outcome }}"
          echo "  - Dependencies: ${{ steps.deps.outcome }}"
          echo "  - Maven Build: ${{ steps.build-maven.outcome }}"
          echo "  - Tests: ${{ steps.tests.outcome || 'skipped' }}"
          echo "  - Docker Build: ${{ steps.build.outcome }}"
          echo "  - Application: ${{ steps.app.outcome }}"
          echo "  - Health Check: ${{ steps.health.outcome }}"
          echo "  - Integration Tests: ${{ steps.integration-tests.outcome || 'skipped' }}"
          
          echo ""
          echo "üåê Infrastructure:"
          echo "  - Network: ${{ env.NETWORK_NAME }}"
          echo "  - Container: ${{ env.CONTAINER_NAME }}"
          echo "  - Image: pulsar-rpa-pro:${{ github.sha }}"
          echo "  - MongoDB: ${{ steps.deps.outputs.mongodb_status }}"
          echo "  - Redis: ${{ steps.deps.outputs.redis_status }}"
          
          echo ""
          echo "üìÖ Completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo "üåü Commit: ${{ github.sha }}"
          
          echo "::endgroup::"

      - name: Cleanup Resources
        if: always()
        uses: ./.github/actions/cleanup-resources
        with:
          container_name: ${{ env.CONTAINER_NAME }}
          cleanup_compose: 'true'
          cleanup_volumes: 'true'
