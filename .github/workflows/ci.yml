name: CI

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - '.github/**'
      - 'bin/**'
      - 'docs/**'
      - 'docker/**'
      - '**.md'
  # Allow manual workflow runs
  workflow_dispatch:

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa-pro

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Read VERSION
        id: version
        run: |
          echo "VERSION=$(head -n 1 VERSION)" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start dependencies
        run: |
          docker compose up mongodb -d
          docker compose up redis -d

      - name: Check MongoDB container status
        run: |
          sleep 5
          for i in {1..5}; do
            if [ "$(docker inspect -f '{{.State.Running}}' mongodb)" = "true" ]; then
              echo "MongoDB container is running!"
              break
            fi
            echo "Waiting for MongoDB container to start..."
            sleep 3
          done
          if [ "$(docker inspect -f '{{.State.Running}}' mongodb)" != "true" ]; then
            echo "MongoDB container is not running!" && exit 1
          fi

      - name: Maven build and deploy to local repo
        run: |
          chmod +x ./mvnw
          ./mvnw clean install -DskipTests -Pall-modules

      - name: Run Tests
        run: ./mvnw test -Pall-modules

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Start Docker container
        run: |
          # Start container
          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          PROXY_ROTATION_URL: ${PROXY_ROTATION_URL}
          "gora.mongodb.servers": mongodb:27017
          SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/pulsar-rpa
          SPRING_DATA_REDIS_HOST: redis
          SPRING_DATA_REDIS_PORT: 6379
          BROWSER_DISPLAY_MODE: HEADLESS
          SERVER_PORT: 8182
          SERVER_ADDRESS: 0.0.0.0

      - name: Wait for Service Available
        run: |
          echo "Waiting for service to be available..."
          sleep 10  # Wait for Spring Boot to start

          for i in {1..30}; do
            if curl -s http://localhost:8182/actuator/health | grep '"status":"UP"'; then
              echo "Service is up!"
              exit 0
            fi

            echo "Waiting for service to be available..."
            # Show logs for debugging
            docker logs --tail 100 pulsar-rpa-test || true
            sleep 3
          done
          echo "Service did not become available in time."
          exit 1

      - name: Run curl integration tests
        run: |
          # Run integration tests
          find bin/ -name "*.sh" -exec chmod +x {} \;

          if ! ./bin/run-integration-test.sh; then
            echo "Integration test failed"
            docker logs pulsar-rpa-test
            docker stop pulsar-rpa-test || true
            exit 1
          fi

      - name: Stop Docker container
        if: always()
        run: docker stop pulsar-rpa-test || true



      - name: Stop MongoDB container
        if: always()
        run: |
          docker compose down || true
