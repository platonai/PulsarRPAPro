#    StringUtils::class.declaredFunctions.map {
#        val s = "fun " + it.name + "(" + it.parameters.joinToString { it.name + ": " + it.type.jvmErasure.simpleName } + "): " + it.returnType.jvmErasure.simpleName
#        val s2 = s + " = " + "StringUtils." + it.name + "(" + it.parameters.joinToString { it.name!! } + ")"
#        s2
#    }.forEach { println(it) }

    fun capitalize(str: String): String = StringUtils.capitalize(str)
    fun isAlpha(str: CharSequence): Boolean = StringUtils.isAlpha(str)
    fun isNumeric(str: CharSequence): Boolean = StringUtils.isNumeric(str)
    fun difference(str: String, arg1: String): String = StringUtils.difference(str, arg1)
    fun remove(str: String, arg1: String): String = StringUtils.remove(str, arg1)
    fun remove(str: String, arg1: Char): String = StringUtils.remove(str, arg1)
    fun equals(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.equals(str, arg1)
    fun length(str: CharSequence): Int = StringUtils.length(str)
    fun toString(str: ByteArray, arg1: String): String = StringUtils.toString(str, arg1)
    fun mid(str: String, arg1: Int, arg2: Int): String = StringUtils.mid(str, arg1, arg2)
    fun indexOf(str: CharSequence, arg1: Int): Int = StringUtils.indexOf(str, arg1)
    fun indexOf(str: CharSequence, arg1: Int, arg2: Int): Int = StringUtils.indexOf(str, arg1, arg2)
    fun indexOf(str: CharSequence, arg1: CharSequence): Int = StringUtils.indexOf(str, arg1)
    fun indexOf(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.indexOf(str, arg1, arg2)
    fun isWhitespace(str: CharSequence): Boolean = StringUtils.isWhitespace(str)
    fun isEmpty(str: CharSequence): Boolean = StringUtils.isEmpty(str)
    fun equalsIgnoreCase(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.equalsIgnoreCase(str, arg1)
    fun startsWith(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.startsWith(str, arg1)
    fun endsWith(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.endsWith(str, arg1)
    fun lastIndexOf(str: CharSequence, arg1: Int): Int = StringUtils.lastIndexOf(str, arg1)
    fun lastIndexOf(str: CharSequence, arg1: CharSequence): Int = StringUtils.lastIndexOf(str, arg1)
    fun lastIndexOf(str: CharSequence, arg1: Int, arg2: Int): Int = StringUtils.lastIndexOf(str, arg1, arg2)
    fun lastIndexOf(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.lastIndexOf(str, arg1, arg2)
    fun substring(str: String, arg1: Int): String = StringUtils.substring(str, arg1)
    fun substring(str: String, arg1: Int, arg2: Int): String = StringUtils.substring(str, arg1, arg2)
    fun replace(str: String, arg1: String, arg2: String): String = StringUtils.replace(str, arg1, arg2)
    fun replace(str: String, arg1: String, arg2: String, arg3: Int): String = StringUtils.replace(str, arg1, arg2, arg3)
    fun contains(str: CharSequence, arg1: Int): Boolean = StringUtils.contains(str, arg1)
    fun contains(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.contains(str, arg1)
    fun split(str: String, arg1: String, arg2: Int): Array<String> = StringUtils.split(str, arg1, arg2)
    fun split(str: String): Array<String> = StringUtils.split(str)
    fun split(str: String, arg1: Char): Array<String> = StringUtils.split(str, arg1)
    fun split(str: String, arg1: String): Array<String> = StringUtils.split(str, arg1)
    fun join(str: CharArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: IntArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: ShortArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: ByteArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: Array<String>): String = StringUtils.join(str)
    fun join(str: Array<String>, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: LongArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: Iterator<String>, arg1: String): String = StringUtils.join(str, arg1)
    fun join(str: Iterable<String>, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: Iterable<String>, arg1: String): String = StringUtils.join(str, arg1)
    fun join(str: DoubleArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: FloatArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: CharArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: Array<String>, arg1: String, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: LongArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: Array<String>, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: DoubleArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: FloatArray, arg1: Char): String = StringUtils.join(str, arg1)
    fun join(str: IntArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: ByteArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: ShortArray, arg1: Char, arg2: Int, arg3: Int): String = StringUtils.join(str, arg1, arg2, arg3)
    fun join(str: Array<String>, arg1: String): String = StringUtils.join(str, arg1)
    fun trim(str: String): String = StringUtils.trim(str)
    fun strip(str: String, arg1: String): String = StringUtils.strip(str, arg1)
    fun strip(str: String): String = StringUtils.strip(str)
    fun isBlank(str: CharSequence): Boolean = StringUtils.isBlank(str)
    fun repeat(str: String, arg1: String, arg2: Int): String = StringUtils.repeat(str, arg1, arg2)
    fun repeat(str: Char, arg1: Int): String = StringUtils.repeat(str, arg1)
    fun repeat(str: String, arg1: Int): String = StringUtils.repeat(str, arg1)
    fun reverse(str: String): String = StringUtils.reverse(str)
    fun left(str: String, arg1: Int): String = StringUtils.left(str, arg1)
    fun right(str: String, arg1: Int): String = StringUtils.right(str, arg1)
    fun isAnyEmpty(str: Array<String>): Boolean = StringUtils.isAnyEmpty(*str)
    fun isNoneEmpty(str: Array<String>): Boolean = StringUtils.isNoneEmpty(*str)
    fun isNotBlank(str: CharSequence): Boolean = StringUtils.isNotBlank(str)
    fun isAnyBlank(str: Array<String>): Boolean = StringUtils.isAnyBlank(*str)
    fun isNoneBlank(str: Array<String>): Boolean = StringUtils.isNoneBlank(*str)
    fun trimToNull(str: String): String = StringUtils.trimToNull(str)
    fun trimToEmpty(str: String): String = StringUtils.trimToEmpty(str)
    fun stripToNull(str: String): String = StringUtils.stripToNull(str)
    fun stripToEmpty(str: String): String = StringUtils.stripToEmpty(str)
    fun stripStart(str: String, arg1: String): String = StringUtils.stripStart(str, arg1)
    fun stripEnd(str: String, arg1: String): String = StringUtils.stripEnd(str, arg1)
    fun stripAll(str: Array<String>): Array<String> = StringUtils.stripAll(*str)
    fun stripAll(str: Array<String>, arg1: String): Array<String> = StringUtils.stripAll(str, arg1)
    fun stripAccents(str: String): String = StringUtils.stripAccents(str)
    fun isNotEmpty(str: CharSequence): Boolean = StringUtils.isNotEmpty(str)
    fun ordinalIndexOf(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.ordinalIndexOf(str, arg1, arg2)
    fun indexOfIgnoreCase(str: CharSequence, arg1: CharSequence): Int = StringUtils.indexOfIgnoreCase(str, arg1)
    fun indexOfIgnoreCase(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.indexOfIgnoreCase(str, arg1, arg2)
    fun lastOrdinalIndexOf(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.lastOrdinalIndexOf(str, arg1, arg2)
    fun lastIndexOfIgnoreCase(str: CharSequence, arg1: CharSequence): Int = StringUtils.lastIndexOfIgnoreCase(str, arg1)
    fun lastIndexOfIgnoreCase(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.lastIndexOfIgnoreCase(str, arg1, arg2)
    fun containsIgnoreCase(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.containsIgnoreCase(str, arg1)
    fun containsWhitespace(str: CharSequence): Boolean = StringUtils.containsWhitespace(str)
    fun indexOfAny(str: CharSequence, arg1: String): Int = StringUtils.indexOfAny(str, arg1)
    fun containsAny(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.containsAny(str, arg1)
    fun indexOfAnyBut(str: CharSequence, arg1: CharSequence): Int = StringUtils.indexOfAnyBut(str, arg1)
    fun containsOnly(str: CharSequence, arg1: String): Boolean = StringUtils.containsOnly(str, arg1)
    fun containsNone(str: CharSequence, arg1: String): Boolean = StringUtils.containsNone(str, arg1)
    fun substringBefore(str: String, arg1: String): String = StringUtils.substringBefore(str, arg1)
    fun substringAfter(str: String, arg1: String): String = StringUtils.substringAfter(str, arg1)
    fun substringBeforeLast(str: String, arg1: String): String = StringUtils.substringBeforeLast(str, arg1)
    fun substringAfterLast(str: String, arg1: String): String = StringUtils.substringAfterLast(str, arg1)
    fun substringBetween(str: String, arg1: String): String = StringUtils.substringBetween(str, arg1)
    fun substringBetween(str: String, arg1: String, arg2: String): String = StringUtils.substringBetween(str, arg1, arg2)
    fun substringsBetween(str: String, arg1: String, arg2: String): Array<String> = StringUtils.substringsBetween(str, arg1, arg2)
    fun splitByWholeSeparator(str: String, arg1: String, arg2: Int): Array<String> = StringUtils.splitByWholeSeparator(str, arg1, arg2)
    fun splitByWholeSeparator(str: String, arg1: String): Array<String> = StringUtils.splitByWholeSeparator(str, arg1)
    fun splitByWholeSeparatorPreserveAllTokens(str: String, arg1: String, arg2: Int): Array<String> = StringUtils.splitByWholeSeparatorPreserveAllTokens(str, arg1, arg2)
    fun splitByWholeSeparatorPreserveAllTokens(str: String, arg1: String): Array<String> = StringUtils.splitByWholeSeparatorPreserveAllTokens(str, arg1)
    fun splitPreserveAllTokens(str: String): Array<String> = StringUtils.splitPreserveAllTokens(str)
    fun splitPreserveAllTokens(str: String, arg1: String): Array<String> = StringUtils.splitPreserveAllTokens(str, arg1)
    fun splitPreserveAllTokens(str: String, arg1: Char): Array<String> = StringUtils.splitPreserveAllTokens(str, arg1)
    fun splitPreserveAllTokens(str: String, arg1: String, arg2: Int): Array<String> = StringUtils.splitPreserveAllTokens(str, arg1, arg2)
    fun splitByCharacterType(str: String): Array<String> = StringUtils.splitByCharacterType(str)
    fun splitByCharacterTypeCamelCase(str: String): Array<String> = StringUtils.splitByCharacterTypeCamelCase(str)
    fun deleteWhitespace(str: String): String = StringUtils.deleteWhitespace(str)
    fun removeStart(str: String, arg1: String): String = StringUtils.removeStart(str, arg1)
    fun removeStartIgnoreCase(str: String, arg1: String): String = StringUtils.removeStartIgnoreCase(str, arg1)
    fun removeEnd(str: String, arg1: String): String = StringUtils.removeEnd(str, arg1)
    fun removeEndIgnoreCase(str: String, arg1: String): String = StringUtils.removeEndIgnoreCase(str, arg1)
    fun replaceOnce(str: String, arg1: String, arg2: String): String = StringUtils.replaceOnce(str, arg1, arg2)
    fun replacePattern(str: String, arg1: String, arg2: String): String = StringUtils.replacePattern(str, arg1, arg2)
    fun removePattern(str: String, arg1: String): String = StringUtils.removePattern(str, arg1)
    fun replaceEach(str: String, arg1: Array<String>, arg2: Array<String>): String = StringUtils.replaceEach(str, arg1, arg2)
    fun replaceEachRepeatedly(str: String, arg1: Array<String>, arg2: Array<String>): String = StringUtils.replaceEachRepeatedly(str, arg1, arg2)
    fun replaceChars(str: String, arg1: Char, arg2: Char): String = StringUtils.replaceChars(str, arg1, arg2)
    fun replaceChars(str: String, arg1: String, arg2: String): String = StringUtils.replaceChars(str, arg1, arg2)
    fun overlay(str: String, arg1: String, arg2: Int, arg3: Int): String = StringUtils.overlay(str, arg1, arg2, arg3)
    fun chomp(str: String): String = StringUtils.chomp(str)
    fun chomp(str: String, arg1: String): String = StringUtils.chomp(str, arg1)
    fun chop(str: String): String = StringUtils.chop(str)
    fun rightPad(str: String, arg1: Int, arg2: Char): String = StringUtils.rightPad(str, arg1, arg2)
    fun rightPad(str: String, arg1: Int): String = StringUtils.rightPad(str, arg1)
    fun rightPad(str: String, arg1: Int, arg2: String): String = StringUtils.rightPad(str, arg1, arg2)
    fun leftPad(str: String, arg1: Int, arg2: Char): String = StringUtils.leftPad(str, arg1, arg2)
    fun leftPad(str: String, arg1: Int): String = StringUtils.leftPad(str, arg1)
    fun leftPad(str: String, arg1: Int, arg2: String): String = StringUtils.leftPad(str, arg1, arg2)
    fun center(str: String, arg1: Int): String = StringUtils.center(str, arg1)
    fun center(str: String, arg1: Int, arg2: Char): String = StringUtils.center(str, arg1, arg2)
    fun center(str: String, arg1: Int, arg2: String): String = StringUtils.center(str, arg1, arg2)
    fun upperCase(str: String, arg1: Locale): String = StringUtils.upperCase(str, arg1)
    fun upperCase(str: String): String = StringUtils.upperCase(str)
    fun lowerCase(str: String, arg1: Locale): String = StringUtils.lowerCase(str, arg1)
    fun lowerCase(str: String): String = StringUtils.lowerCase(str)
    fun uncapitalize(str: String): String = StringUtils.uncapitalize(str)
    fun swapCase(str: String): String = StringUtils.swapCase(str)
    fun countMatches(str: CharSequence, arg1: CharSequence): Int = StringUtils.countMatches(str, arg1)
    fun isAlphaSpace(str: CharSequence): Boolean = StringUtils.isAlphaSpace(str)
    fun isAlphanumeric(str: CharSequence): Boolean = StringUtils.isAlphanumeric(str)
    fun isAlphanumericSpace(str: CharSequence): Boolean = StringUtils.isAlphanumericSpace(str)
    fun isAsciiPrintable(str: CharSequence): Boolean = StringUtils.isAsciiPrintable(str)
    fun isNumericSpace(str: CharSequence): Boolean = StringUtils.isNumericSpace(str)
    fun isAllLowerCase(str: CharSequence): Boolean = StringUtils.isAllLowerCase(str)
    fun isAllUpperCase(str: CharSequence): Boolean = StringUtils.isAllUpperCase(str)
    fun defaultString(str: String): String = StringUtils.defaultString(str)
    fun defaultString(str: String, arg1: String): String = StringUtils.defaultString(str, arg1)
    fun defaultIfBlank(str: CharSequence, arg1: CharSequence): CharSequence = StringUtils.defaultIfBlank(str, arg1)
    fun defaultIfEmpty(str: CharSequence, arg1: CharSequence): CharSequence = StringUtils.defaultIfEmpty(str, arg1)
    fun reverseDelimited(str: String, arg1: Char): String = StringUtils.reverseDelimited(str, arg1)
    fun abbreviate(str: String, arg1: Int, arg2: Int): String = StringUtils.abbreviate(str, arg1, arg2)
    fun abbreviate(str: String, arg1: Int): String = StringUtils.abbreviate(str, arg1)
    fun abbreviateMiddle(str: String, arg1: String, arg2: Int): String = StringUtils.abbreviateMiddle(str, arg1, arg2)
    fun indexOfDifference(str: Array<String>): Int = StringUtils.indexOfDifference(*str)
    fun indexOfDifference(str: CharSequence, arg1: CharSequence): Int = StringUtils.indexOfDifference(str, arg1)
    fun getCommonPrefix(str: Array<String>): String = StringUtils.getCommonPrefix(*str)
    fun getLevenshteinDistance(str: CharSequence, arg1: CharSequence): Int = StringUtils.getLevenshteinDistance(str, arg1)
    fun getLevenshteinDistance(str: CharSequence, arg1: CharSequence, arg2: Int): Int = StringUtils.getLevenshteinDistance(str, arg1, arg2)
    fun getJaroWinklerDistance(str: CharSequence, arg1: CharSequence): Double = StringUtils.getJaroWinklerDistance(str, arg1)
    fun startsWithIgnoreCase(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.startsWithIgnoreCase(str, arg1)
    fun startsWithAny(str: CharSequence, arg1: Array<String>): Boolean = StringUtils.startsWithAny(str, *arg1)
    fun endsWithIgnoreCase(str: CharSequence, arg1: CharSequence): Boolean = StringUtils.endsWithIgnoreCase(str, arg1)
    fun normalizeSpace(str: String): String = StringUtils.normalizeSpace(str)
    fun endsWithAny(str: CharSequence, arg1: Array<String>): Boolean = StringUtils.endsWithAny(str, *arg1)
    fun appendIfMissing(str: String, arg1: CharSequence, arg2: Array<String>): String = StringUtils.appendIfMissing(str, arg1, *arg2)
    fun appendIfMissingIgnoreCase(str: String, arg1: CharSequence, arg2: Array<String>): String = StringUtils.appendIfMissingIgnoreCase(str, arg1, *arg2)
    fun prependIfMissing(str: String, arg1: CharSequence, arg2: Array<String>): String = StringUtils.prependIfMissing(str, arg1, *arg2)
    fun prependIfMissingIgnoreCase(str: String, arg1: CharSequence, arg2: Array<String>): String = StringUtils.prependIfMissingIgnoreCase(str, arg1, *arg2)
    fun toEncodedString(str: ByteArray, arg1: Charset): String = StringUtils.toEncodedString(str, arg1)
